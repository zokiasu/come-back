name: Dependency Updates

on:
  schedule:
    # Exécute tous les lundis à 9h00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Permet l'exécution manuelle

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check for dependency updates
        id: check-updates
        run: |
          # Vérifier les mises à jour disponibles
          npx npm-check-updates --jsonUpgraded > updates.json || echo "{}" > updates.json
          
          # Compter le nombre de mises à jour
          UPDATES_COUNT=$(cat updates.json | jq '. | length')
          echo "updates_count=$UPDATES_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$UPDATES_COUNT" -gt 0 ]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            # Créer une liste des packages à mettre à jour
            cat updates.json | jq -r 'keys[]' > packages_list.txt
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Create individual PRs for each package
        if: steps.check-updates.outputs.updates_available == 'true'
        run: |
          # Lire le fichier des packages et créer une PR pour chaque package
          while IFS= read -r package; do
            echo "Processing package: $package"
            
            # Obtenir la version actuelle et la nouvelle version
            current_version=$(cat updates.json | jq -r --arg pkg "$package" '.[$pkg]' | sed 's/[\^~]//g')
            old_version=$(jq -r --arg pkg "$package" '.dependencies[$pkg] // .devDependencies[$pkg]' package.json | sed 's/[\^~]//g')
            
            # Créer une branche pour ce package
            branch_name="update-${package//\//-}-${current_version}"
            git checkout -b "$branch_name"
            
            # Mettre à jour seulement ce package
            npx npm-check-updates -u "$package" || continue
            
            # Installer et tester
            npm install --legacy-peer-deps || echo "Install failed for $package"
            build_result="✅ Succès"
            lint_result="✅ Succès"
            
            npm run build || build_result="❌ Échec"
            npm run lint || lint_result="❌ Échec"
            
            # Créer le commit
            git add package.json package-lock.json 2>/dev/null || git add package.json
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git commit -m "chore: update $package to $current_version" || continue
            
            # Pousser la branche
            git push origin "$branch_name" || continue
            
            # Créer la PR via GitHub CLI ou API
            cat > pr_body.md << EOF
          ## 📦 Mise à jour de \`$package\`
          
          **Version:** \`$old_version\` → \`$current_version\`
          
          ### 🧪 Tests automatiques:
          - **Build:** $build_result
          - **Lint:** $lint_result
          
          ### 📋 À vérifier manuellement:
          - [ ] Tests unitaires et d'intégration
          - [ ] Fonctionnalités utilisant ce package
          - [ ] Pas de breaking changes
          
          ### 📚 Changelog:
          Consultez le changelog du package pour plus de détails sur les changements.
          
          ---
          
          🤖 PR générée automatiquement par GitHub Actions.
          EOF
            
            # Créer la PR avec l'API GitHub
            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/pulls \
              -d "{
                \"title\": \"🔄 Update $package to $current_version\",
                \"head\": \"$branch_name\",
                \"base\": \"main\",
                \"body\": $(cat pr_body.md | jq -Rs .),
                \"labels\": [\"dependencies\", \"automated\", \"individual-update\"]
              }" || echo "Failed to create PR for $package"
            
            # Retourner à main pour le prochain package
            git checkout main
            
          done < packages_list.txt

      - name: Comment on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '❌ Échec de la mise à jour des dépendances',
              body: '## Problème détecté\n\nLa mise à jour automatique des dépendances a échoué.\n\n**Action requise:** Vérifiez manuellement les dépendances et corrigez les conflits éventuels.\n\n**Workflow:** ' + context.workflow + '\n**Run ID:** ' + context.runId,
              labels: ['bug', 'dependencies', 'needs-attention']
            });