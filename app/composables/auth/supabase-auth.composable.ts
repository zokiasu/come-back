import { useUserStore } from '@/stores/user'
import type { Database } from '~/types'

export const useSupabaseAuth = () => {
	const isLoading = ref(false)
	const error = ref<string | null>(null)

	const loginWithGoogle = async () => {
		console.log('üöÄ D√©but de la connexion Google...')
		isLoading.value = true
		error.value = null

		try {
			// Utiliser le client Supabase global
			const supabase = useSupabaseClient()
			console.log('üì° Client Supabase initialis√©:', !!supabase)

			const { data, error: authError } = await supabase.auth.signInWithOAuth({
				provider: 'google',
				options: {
					redirectTo: `${useRequestURL().origin}/auth/callback`,
				},
			})

			console.log('üìä R√©ponse OAuth:', { data, error: authError })

			if (authError) {
				console.error('‚ùå Erreur OAuth:', authError)
				throw authError
			}

			console.log('‚úÖ Redirection vers Google initi√©e')
		} catch (err: any) {
			console.error('‚ùå Erreur lors de la connexion Google:', err)
			error.value = err.message || 'Erreur de connexion'
		} finally {
			isLoading.value = false
		}
	}

	const handleAuthCallback = async () => {
		try {
			const user = useSupabaseUser()
			const { ensureUserProfile } = useAuth()

			console.log('üîç Callback - Utilisateur Supabase:', user.value)

			if (user.value) {
				console.log('‚úÖ Utilisateur connect√©!')
				console.log('üìß Email:', user.value.email)
				console.log('üÜî ID:', user.value.id)
				console.log('üë§ M√©tadonn√©es:', user.value.user_metadata)
				console.log('üîó Identit√©s:', user.value.identities)
				console.log('üìÖ Cr√©√© le:', user.value.created_at)
				console.log('üîÑ Derni√®re connexion:', user.value.last_sign_in_at)

				// Synchroniser le profil utilisateur
				await ensureUserProfile()

				await navigateTo('/')
			} else {
				console.log('‚ùå Aucun utilisateur trouv√© dans le callback')
			}
		} catch (err: any) {
			console.error('‚ùå Erreur lors du callback:', err)
			error.value = err.message || 'Erreur de callback'
		}
	}

	const logout = async () => {
		const { logout: authLogout } = useAuth()
		try {
			await authLogout()
		} catch (err: any) {
			console.error('Erreur lors de la d√©connexion:', err)
			error.value = err.message || 'Erreur de d√©connexion'
		}
	}

	return {
		isLoading,
		error,
		loginWithGoogle,
		logout,
		handleAuthCallback,
	}
}
